{"__v":27,"_id":"nuby_express:layout_component","author":"bingomanatee","content":"The [Layout Component](http://www.github.com/bingomanatee/com_layout) is a flagship component and one of the best illustrations of the power of a hard-core framework like Nuby Express. It significantly upgrades a Nuby Express application, altering fundamental components and scanning for layout resources across the entire application, thereby enabling an entirely new class of resources. \n\nLayouts, like actions, use the EJS* templating system. \n\n## Layout Names\n\nA layout's name by default is the name of its containing folder; you can override this in the layout configuration file.\n\nAny layout declared in the application can be used by any action in the application, so ensure that each layout has a unique name. \n\n## Layout Variables\n\nIt's not always explicit in EJS documentation, all of the input variables passed to `action.on_output(rs, output)` or `rs.render(rs, template, output)` are exposed to the layout. So if you want to populate menus, breadcrumb, `<title>` tags etc., you can do so in the same way you prepare values for action templates: actions, or [[view_helpers:View helpers]]\n\n## Reserved Local Variable Names\n\n* __layout__: You <c red>CANNOT INCLUDE A VARIABLE NAMED __layout__</c> if you are using the Layout component; it can produce unexpected results and/or be overwritten\n* __body__: Every template has a `<%- body %>` insert where the content of a page is placed, so natrually, trying to use that as the name of a local variable doesn't work.\n\n### Bundled Layouts\n\nThe layout module itself has two layouts: \n\n*  __empty__ (a HTML-free layout, good for AJAX responses) \n* __html__ a CSS free layout, good for truly custom pages or a starting place for a custom module\n\n## Layout Directories\n\n[[controllers:Controllers]] and [[components:Components]] (and the [[frameworks:Framework]] directory by extension) can all have a layouts directory with one or more named layout directories in them. \n\nA layout directory is a folder whose name is (by default) the name of the layout itself. For instance, this site has a layout for the home page itself, with the following folder structure:\n\n``` files\napp\n  components\n    com_homepage\n      layouts\n         home\n           public\n              css\n              js\n              img\n         views\n            template.html\n               css.html\n               js.html\n               sidebar.html\n         config.json\n```\n\nThe layout's name is \"home\" (as further reinforced in the configuration below). this means that my home page action's configuration looks like this:\n\n``` json\n{\n    \"layout_name\": \"home\"\n}\n```\nand therefore is encased in the \"home\" layout described above.\n\n### Layout configuration\n\nLayouts have fairly significant configuration files. There are no required configurations but by convention they have at least some of the following:\n\n* __name__ -- for documentary purposes, or if you want the name of your layout to be different from the folder name of your layout. \n* __javascript__ and __javascript_head___ -- an array of paths to bundled javascript; to be embedded in your layout in the and of your `<body>` tag and in the `<head>` tag respectively. No allowance for inline JS is made here. Note that while it is fine for all the references to be simple path strings, it can be redundant to re-type the same prefix over and over, so you can also pass an object whose key(s) are a root prefix, and whose values are arrays of path suffixes, as in the __javascript_head__ in the example below. \n* __css__ -- an array of paths to CSS files. \n* __options__ -- an array of [[site_options:Options]]\n* __static_prefix__ --<c red>required</c> if you have a public folder of static resources in your layout, this is the prefix for ALL the files in that folder. Note unlike [[action_static_folder:Static folders]], public folders are configured externally and share a common prefix. \n\nBelow is a sample configuration file. \n\n``` json\n\n{\n\t\"name\":\"home\",\n\t\"static_prefix\":\"home_layout\",\n\t\"css\":[\n\t\t\"/home_layout/css/bootstrap.min.css\",\n\t\t\"/home_layout/css/bootstrap-responsive.min.css\",\n\t\t\"http://fonts.googleapis.com/css?family=Oswald:400,300,700\",\n\t\t\"/home_layout/css/style.css\",\n\t\t\"/home_layout/css/style.less\"\n\n\t],\n\t\"javascript\":[\n\t\t\"/home_layout/js/vendor/bootstrap.min.js\",\n\t\t\"//twitter.github.com/bootstrap/1.4.0/bootstrap-tabs.js\"\n\t],\n```\nNote - the below is the equivalent of an array including \n\n``` js\n[\"/home_layout/js/vendor/jquery-1.8.0.min.js\",\n\t\t\t\t\"/home_layout/js/vendor/jquery-ui-1.8.23.custom.min.js\",\n\t\t\t\t\"/home_layout/js/vendor/modernizr-2.6.1.min.js\",\n\t\t\t\t\"/home_layout/js/vendor/less-1.1.3.min.js\",\n\t\t\t\t\"/home_layout/js/vendor/desandro-masonry/jquery.masonry.min.js\"]\n``` but requires less typing :D\n\n``` json\n\t\"javascript_head\":[\n\t\t{\n\t\t\t\"/home_layout/js/vendor\":[\n\t\t\t\t\"jquery-1.8.0.min.js\",\n\t\t\t\t\"jquery-ui-1.8.23.custom.min.js\",\n\t\t\t\t\"modernizr-2.6.1.min.js\",\n\t\t\t\t\"less-1.1.3.min.js\",\n\t\t\t\t\"desandro-masonry/jquery.masonry.min.js\"\n\t\t\t]\n\t\t},\n\t\t\"//cdnjs.cloudflare.com/ajax/libs/underscore.js/1.3.3/underscore-min.js\"\n\t],\n```\nThe below configuration expresses resources for the [[menu_component:Menu component]] detailed therein:\n``` json\n\t\"menus\":[\n\t\t{\n\t\t\t\"name\":\"member\",\n\t\t\t\"title\":\"Members\"\n\t\t}\n\t\t,\n\t\t{\n\t\t\t\"name\":\"nav\",\n\t\t\t\"title\":\"Menu\"\n\t\t}\n\t]\n\n}\n```\n\n## The View Template(s)\n\nUnlike [[actions:Actions]], whose view is a single file at the root of the `action` folder, templates' views are in a `views` folder and are named `template.html`. They are in EJS.\n\nHere is the `template.html` file for the `home` layout. Note that the actual content produced by any given action is expressed as a \n\n The view folder can also include partials for the template; for instance the head of most layout templates looks like this: \n\n``` ejs\n\n<!DOCTYPE html>\n<html> \n<head>\n    <meta charset=\"utf-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n    <title><%= layout_options.site_title %></title>\n    <meta name=\"description\" content=\"\">\n    <meta name=\"viewport\" content=\"width=device-width\">\n```\nHere, partials render a proper CSS and JS link/script tag: \n``` ejs\n    <!-- Stylesheets -->\n   <%- partial(\"css.html\", css) %>\n\n    <!-- Scripts -->\n    <%- partial(\"js.html\", javascript_head) %>\n\n</head>\n\n```\n\nwith partials like this for javascript (in the head or tail) like this:\n\n``` ejs\n<script type=\"text/javascript\" src=\"<%= js %>\">\n</script>\n```\n\n---------------\n*[[why_ejs:Click here]] for my explanation of why I like EJS better than other templating systems.","creator":"bingomanatee","name":"layout_component","scope":"nuby_express","summary":"Enables advanced layouts, with their own configuration, static resources, etc.","title":"Layout Component","write_date":"2012-10-26T18:08:46.283Z","scope_root":false,"deleted":false}