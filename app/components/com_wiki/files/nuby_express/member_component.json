{"__v":15,"_id":"nuby_express:member_component","author":"bingomanatee","content":"The member component is a bare-bones manager for registration and ACL.\n\nThere are three basic models in the member component: \n\n1. __member model__ : The basic registry for members. \n2. __role model__ : The list of available roles. Members can have zero, one or *several* roles. \n3. __task model__ : The list of available actions for a user. \n\n## Tasks\nThe names of tasks are strings; by convention they are simple space-delimited \"noun verb\" pairs like \"edit article\" or \"delete member\". However anything goes - make whatever tasks you need to to secure and granularize access to your data/application. \n\nTasks are updated every time an application started based on \"tasks\" definition in actions, controllers and components. That is you can define tasks essentially anywhere, as in the component configuration for the members module itself:\n\n``` json\n\n{\n    \"tasks\":[\n        \"admin members\",\n        \"view public profiles\",\n        \"admin permissions\"\n    ]\n}\n\n```\n\n## Roles\nRoles are essentially named collections of task grants. Each privileged user should be given one or more roles to (indirectly) grant them task access to do privileged actions in your website.\n\n## Member Model\n\nThe Member model has a variety of fields:\n\n* __real_name__ - string\n* __member_name__ (required, and unique) - string; used to log in. \n* __pass__ (required) - an encrypted string. \n* __roles__ (optional) - [string] - names of the role(s) the user has been given, if any, to allow them access to restricted areas/content in the site. \n* __meta_fields__ - an arbitrary field, pref. a hash of custom key-values, for extensibility\n* __location__ - string; publicly viewable description of where the user lives. This field is not intended to be a substitute for formatted address information. \n* __locale__ - string: a two-letter code for i18n use. \n* __public_profile__ and __private_profile__ - string, bios for the user. Only the public one (should) be exposed on the site to other users. \n* __end_method__ (required) - enum; which method the password was encrypted with. \n* __enc_envelope__ (required) - string: the \"salt\" the password was encrypted with. \n* __admin_notes__ - string; any comment you want to make on a given user.\n\n## Methods\n\nIts useful to understand that `tasks` are not directly stored in the member record, and only the name of roles are stored, not the full role document. This ensures that if you edit a role definition, you don't have to manually update every members' record in the repository.&ast;\n\n* __can(member, [can_tasks], cb)__ - the fundamental ACL method. the callback is passed (err, boolean), with boolean being true if the member has ALL the tasks in `can_tasks`. Note that this method appends a *temporary* cache, `tasks`, to the members' record, for efficiencies' sake. \n\n* __member_tasks(member, cb)__ - passes out a list of tasks that the member can perform, given their role(s) - if any. Primarily a sub-method for __can(..)__. \n* __remove_role(role)__ - removes a role from <c red>EVERY</c> member in the repository. A useful housekeeping method for role management. \n* __set_member_pass(cb, member, pass, method, envelope)__ Sets the members' password, using an encryption algorithm. \n* __encrypt_password(pass, method, envelope)__ - string: returns an encrypted password. Useful if you want to use password locking in non-membership contexts. \n* __make_envelope():__ -string: generates a random token. \n\n---------------\n<small>&ast; However if you change a roles' tasks, members *will* have to \nsign in and out again to refresh their privileges, because member tasks *are* cached in session.</small>","creator":"bingomanatee","name":"member_component","scope":"nuby_express","summary":"The Member component - basic user management, ACL","title":"member component","write_date":"2012-10-26T18:07:28.685Z","scope_root":false,"deleted":false}