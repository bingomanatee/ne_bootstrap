{"__v":5,"_id":"nuby_express:req_state","author":"bingomanatee","content":"In Express.js, the state of a given request is broken down into two objects: req(sort for request) and res(short for response). \n\nIn Nuby Express, these objects are attached to a single object, the Request State, a.k.a. the Req_State or rs object. \n  \nReq_State is more than a grouping of convenience. All the input properties of the request are aggregated into the `rs.req_params` collection, and there are several convenience methods attached to this object: \n\n* `session(key)`, `clear_session(key)`, and `set_session(key, value)` gives you access to the session\n* `go(path)`: an alias to res.redirect(), sends the user to another URL\n* `flash(type, message)`: places a message on the flash queue for client side display\n* `send(object)` is an alternate to action.on_output() -- it sends a response in JSON to the action. \n* `has_property(key)` and `has_content(key)` are functions that test req_props for the existence of a given property. The latter validates that the property is \"javascript truthy\" where the former accepts the mere existence of the property in the param list even if its value is empty.\n\n## Mocking Req_State for testing: Req_State_Mock\n\nFor test purposes, NE provides an Req_State_Mock class. Req_State_Mock has the following creation signature: \n\n``` javascript\n\nvar rs = new NE.Req_State_Mock(action, {\n  config: {foo: 1, bar: 2},\n  url: '/action_url',\n  session: {uid: 1000},\n  framework: {..},\n  method: 'post'})\n\n```\n\nwhere action is the action script. You do not have to set all or any of the above properties unless they are needed for testing.","creator":"bingomanatee","name":"req_state","scope":"nuby_express","summary":"Contains all the data for an individual request","title":"The Request State (Req_State, or rs) object","write_date":"2012-10-21T04:46:54.088Z","scope_root":false,"deleted":false}