{"__v":3,"_id":"nuby_express:error_handling","author":"bingomanatee","content":"Throwing an exception is a fairly unhelpful way of managing failures in application flow, especially if the error was already managed and returned by other processes. \n\nIn NE [[actions]], the best way to manage errors is to emit an error. \n\nActions are designed to trap the following messages, emitted from their respective methods: \n* `validate_error`\n* `input_error`\n* `process_error`\n\nThe signature for emitting an error is `this.emit('validate_error`, rs, error|message_string). \n\nOnce an error is emitted, one of two responses are emitted, depending on the value of the actions' `_on_error_go`* property.**\n\n* if `_on_error_go` is true, an error message is sent back to the client as a JSON body.\n* if `_on_error_go` is a URL string, then the user is redirected to another page. This is done through the [[req_state:Req_State]]'s `flash` and `go` methods.\n\n------\n<small>* (You can create multiple endpoint routes with more granular _on_error_go variations: `_on_validate_error_go`, `_on_post_error_go`, `_on_post_validate_error_go`, etc </small> \n\n<small>** (note - this is a property of the action script, not a configuration or option.</small>","creator":"bingomanatee","name":"error_handling","scope":"nuby_express","summary":"Error handling in NE Actions","title":"Error Handling","write_date":"2012-10-21T04:17:35.947Z","scope_root":false,"deleted":false}