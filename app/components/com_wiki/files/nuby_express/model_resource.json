{"__v":15,"_id":"nuby_express:model_resource","author":"bingomanatee","content":"Because Nuby Express is non-denominational about the model layer - it is not bound to any particular repository, sql/no-sql, etc. - there is NO api for what a model class is/does, beyond the general [[resources:Resource API]]*\n\nThe only unique characteristic for models in NE is that they are attached to a models property at runtime. \n\nI.e., if you declare a model resource like this: \n\n``` javascript\n\nmodule.exports = function(){\n  return {\n           name: 'calendar_event',\n           get: function(id, cb){..}\n          ....\n         };\n  }\n\n} \n```\n\nthen in *any* action you can access models.calendar_events \n\n``` javascript\n\nmodule.exports = {\n\n   ...\n\n  on_input: function(rs){\n    var self = this;\n    this.calendar_items.get(rs.req_props.id, function(err, cal_item){ self.on_process(rs, cal_items);})\n  }\n ..\n}\n\n```\n\n## Mongoose_Model class\n\nWhile the fundamental framework does not endorse any model, the Bootstrap modules, and all my personal modules (like this one) uses MongoDB -- and Mongoose -- and my custom model class Mongoose_Model. \n\nI wrote this class for several reasons:\n\n* I wanted to be able to freely write a model layer without worrying about namespace collisions.\n* I was raised to not use inheritance in model class design, so thats what I believe.\n* I wanted a baseline set of methods that followed the REST pattern more closely, and used soft delete\n* I wanted to be able to switch out MongoDB for another repo base if I needed to\n\nThe mongoose_model module is actually a factory with a single method: \n\n``` javascript\n\ncreate( model|schema, mixin, mongoose)\n\n```\n\nThe parameters are as follows: \n\n<dl>\n<dt>model|schema</dt>\n<dd>the model definition - can be a __schema definition object__, a compiled __mongoose schema__, or a defined __mongoose model__ (that is, a model defined with native mongoose).</dd>\n<dt>mixins</dt>\n<dd>An object hash of any methods you want to add to the returned `mongoose_model` class. the __name__ property is __required__.</dd>\n<dt>mongoose</dt>\n<dd>The mongoose library must be __injected__ into the __create__ method because that's the only way to run unit tests on \"test repos\" -- as the (default) database identity is embedded in the mongoose model. \n</dl>\n\nThe Mongoose_Model class is actually part of an independent module called Support. It has the following API: \n\n<dl>\n<dt>get(id, fields, options, cb)</dt>\n<dd>Retrieve a single record</dd>\n<dt>put(doc, options, callback) (alias: post)</td>\n<dd>Insert (or replace) a single document.</dd>\n<dt>revise(data callback)</dt>\n<dd>Updates a set of fields - \"mixes in\" the data properties over an existing record.</dd>\n<dt>delete(id, callback, soft:bool)</dt>\n<dd>if soft is truthy, it sets the 'deleted' property of record id to true; otherwise it permanantly deletes it.</dd>\n<dt>find(crit, fields, options, callback) chainable **</dt>\n<dd>Finds records matching the criteria; passed out an array of zero or more records.</dd>\n<dt>find_one(crit, fields, options, callback) chainable **</dt>\n<dd>Finds __one__ matching record</dd>\n<dt>count(query, callback)</dt>\n<dd>returns the number of records matching the criteria</dd>\n<dt>validate(data, callback)</dt>\n<dd>Returns the validation errors that a mongoose model *would* return if it was initalized and you tried to save it with the values passed in.</dd>\n<dt>all(callback, max, skip) chainable*</dt>\n<dd>Returns all the records - with optional pagination.</dd>\n<dt>model [property]</dt>\n<dd>the native mongoose model for this collection</dd>\n</dl>\n\nSo, while there is no absolute API for models, this is *my* api for models, and if you are looking for a template for models, you could do worse. \n\n------------\n<small>* it must have a name and a type, in this case 'model').</small>\n\n<small>&#42;&#42; Chainable methods will return a Mongoose query object if callback is absent, for further semantic extension -- for instance you can call \n\n``` javascript\n   this.models.calendar_items.active().where('creator').equals(member._id).exec(function(err, items){...})\n```\nSee the Mongoose documentation on queries for more details.\n</small>","creator":"bingomanatee","name":"model_resource","scope":"nuby_express","summary":"Action Model Resources","title":"Model Resources","write_date":"2012-10-25T16:26:36.285Z","scope_root":false,"deleted":false}