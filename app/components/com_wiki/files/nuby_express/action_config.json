{"__v":5,"_id":"nuby_express:action_config","author":"bingomanatee","content":"Action configuration files are JSON files and must follow all the [JSON syntax definitions](http://www.json.org/). \n\nThey have a few critical properties: `method` and `route`. \n\n* __method__ is the name of the REST action that the action responds to: `get`, `put`, `post`, `delete`, or `*` indicating a multi-method action. \n* __route__ is a string of the URL the action responds to. The URL follows the Express.js style formatting standards for URLs. It can also be an array of URLs.\n* __name__: the name of the action; if omitted the name of the folder is used. \n\nIn the case of a multi-method action, __route__ is replaced by one or more of the following: \n\n* __get_route__\n* __put_route__\n* __post_route__\n* __delete_route__\n\nNote that an action will not respond to the routes you do not define; there is no requirement that an action handle all four of the above methods.\n\n### Accessing configuration within an action\n\nYou can access any configuration setting through `this.get_config(name)` from an action's methods. Note that if the requested property is missing from an action's configuration, the request percolates upwards through the controller, component and the root framework until a match is found. If you don't want this to be true, use `this.get_direct_config(name)` instead. \n\n## NE Bootstrap properties\n\nThere are a few properties specific to the NE Bootstrap system: \n\n* __javascript__ and __javascript_head__ : an array of javascript script paths.\n* __css__: an array of CSS paths.\n* __tasks__: an array of permissions required by the action. Note-defining tasks does not automatically constrain action access - you still have to use self.model.members.can() in the action body,\n* __layout_name__: the name of the layout that the action uses. \n* __options__: unlike configurations which are read at load time and are changed by editing config files, options are managed in the administrative layer. They are useful for adding customization to a website. Options are an array of properties; for example, \n\n``` json\n{\n\n    \"options\":[\n        {\n            \"name\":\"facebook_app_id\",\n            \"data_type\":\"string\",\n            \"default\":\"\",\n            \"notes\":\"the app id given in your Facebook app configuration page. \"\n        },\n        {\n            \"name\":\"facebook_app_secret\",\n            \"data_type\":\"string\",\n            \"default\":\"\",\n            \"notes\":\"the app secret given in your Facebook app configuration page.\"\n        },\n        {\n            \"name\":\"facebook_app_domain\",\n            \"data_type\":\"string\",\n            \"default\":\"\",\n            \"notes\":\"the app domain given in your Facebook app configuration page.\"\n        }\n    ]\n}\n```","creator":"bingomanatee","name":"action_config","scope":"nuby_express","summary":"The configuration file for a Nuby Express action","title":"Action Configuration Files","write_date":"2012-10-21T04:36:24.784Z","scope_root":false,"deleted":false}