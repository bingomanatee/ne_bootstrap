{"__v":12,"_id":"nuby_express:testing","author":"bingomanatee","content":"Nuby was designed from the ground up with testability in mind, specifically unit testing. Actions in node are designed to be tested in isolation from the larger framework with minimal mocking, making them run much faster than testing systems like Ruby that require the entire stack to load up before any testing is done.\n\nThere is no \"official\"/ custom testing framework for Nuby Express but I find the [Tap Frameowrk](https://github.com/isaacs/node-tap) TAP (Test Anywhere Protocol) system by Isaacs to be reliable. \n\n## Mocking Functionality\n\nThere is a [[req_state:Req_State_Mock]] class in the framework designed to mock the [[req_state:Req_State]] for testing a given action. \n\nAs there is no `on_output` method on most instances of action, you will have to mock that yourself; this is a good place to put the termination handler for your testing. \n\nThe other area where mocking will be required is to add a models collection to your action prior to execution.\n\n# Case Study: Testing Content Importing in the [[wiki_component:Wiki Component]]\nThe wiki component can read content in from a set of files; this is the test structure to validate that action. It relies on the [Test Anywhere Protocol (TAP)](https://github.com/isaacs/node-tap) module. \n\n``` javascript\nvar tap = require('tap');\nvar util = require('util');\nvar _ = require('underscore');\nvar NE = require('nuby-express');\nvar path = require('path');\nvar _DEBUG = false;\n```\nThe below line loads the actual script file of the action into local scope. Note that this does NOT pass through the sort of filtering that actions normally go through during a running application cycle. \n\nThis particular test validates that we can find the expected scope folders in our test data folders. \n``` javascript\nvar act = require('./../controllers/admin/actions/import/import_action');\n\ntap.test('route to index', function (t) {\n``` \nHere we are adding an on_output mock to the action to trap the final output parameters. It will not pass through the view filter/layout process as we are interested in the parameters that are passed to this process, not in testing the rendering routines. \n\nIt also terminates the tap test by calling t.end().\n\n``` javascript\n    var import_action = _.extend({\n        on_output: function(rs, output){\n          if (_DEBUG)  console.log('outputting %s', util.inspect(output));\n            var files = _.sortBy(output.files, _.identity);\n            t.deepEqual(files, ['other_wiki', 'test_export'], 'found files in test export dir')\n            t.end();\n        }\n    }, act);\n```\nThis particular action pulls files from a shared import file folder. We are reorienting the action towards a set of test files in our test folder here. \n\nAlso, we are mocking in the member model so we can get through the ACL; this action is protected from casual use by the [[member_component:Member component]]'s ACL method \"can(..)\" method. We are only expecting the 'create_article' task as being required, so any other tests will fail. \n``` javascript\n    import_action.EXPORT_ROOT = path.resolve(__dirname, 'test_export_files');\n    import_action.models = {\n\n        member:{\n            can:function (rs, what, cb) {\n                var can = true;\n\n                if (_.isString(what)) {\n                    what = [what];\n                }\n\n                what.forEach(function (test) {\n                    switch (test) {\n                        case 'create article':\n                            can = true;\n                            break;\n\n                        default:\n                            return cb(new Error('unknown test: ' + test), false);\n                    }\n                })\n\n                cb(null, can);\n            }\n        }\n\n    }\n\n    var rs = new NE.Req_State_Mock({}, {});\n\n    import_action.on_validate(rs);\n\n})\n\n```\nThis is the beginning of the second test in which we actually examine the content that we import. \n``` javascript\ntap.test('full import', function (t) {\n\n    var import_action = _.extend({\n        on_output: function(rs, output){\n            if (_DEBUG)  console.log('outputting %s', util.inspect(output));\n            var files = _.sortBy(output.files, _.identity);\n            t.deepEqual(files, ['other_wiki', 'test_export'], 'found files in test export dir')\n            t.equals(found_files, 3, 'three files found');\n            t.end();\n        }\n    }, act);\n\n    import_action.EXPORT_ROOT = path.resolve(__dirname, 'test_export_files');\n    import_action.models = {\n\n        member:{\n            can:function (rs, what, cb) {\n                var can = true;\n\n                if (_.isString(what)) {\n                    what = [what];\n                }\n\n                what.forEach(function (test) {\n                    switch (test) {\n                        case 'create article':\n                            can = true;\n                            break;\n\n                        default:\n                            return cb(new Error('unknown test: ' + test), false);\n                    }\n                })\n\n                cb(null, can);\n            }\n        }\n\n    }\n\n    var found_files = 0;\n    import_action.import_file = function(file_path){\n```\nIn this second test we look for three known files and test that only these files exist and are returned, through regex.We also test that three files are found through iterating the found_files. \n``` javascript\n        var tx = import_action.EXPORT_ROOT + '/(bar|foo|vey).json';\n        console.log('regex: %s', tx);\n        var file_test = new RegExp(t);\n\n        t.ok(file_test.test(file_path), 'file path match: ' + file_path);\n\n        ++found_files;\n    }\n\n    var rs = new NE.Req_State_Mock(import_action, {req_props: {scope: 'test_export'}});\n\n    import_action.on_validate(rs);\n\n    setTimeout(function(){\n        console.log('go places: %s', util.inspect(rs.go_places));\n        console.log('msgs: %s', util.inspect(rs.flash_msgs));\n    }, 1000);\n\n})\n\n```","creator":"bingomanatee","linked_from":[],"name":"testing","scope":"nuby_express","summary":"Testing actions and sites using unit and integration testing","title":"Testing Nuby Express websites","write_date":"2012-10-26T01:04:50.978Z","scope_root":false,"deleted":false}