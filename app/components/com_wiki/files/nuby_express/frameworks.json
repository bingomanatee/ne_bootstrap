{"scope":"nuby_express","name":"frameworks","title":"Frameworks","summary":"The core of your Nuby Express application","content":"Every running Nuby Express app has a single framework. The framework has several roles: \n\n1. Scanning and loading your application files. \n2. Initializing your Express.js server.\n3. Acting as a registry of resources. \n4. Providing a registry of application components, controllers, and actions\n\n### Why not just use Express' server? \n\nThere is a lot of code in the Framework; much of it is not directly related to request/response management. It is easier to develop a complex system like NE without having to worry about namespace collisions. \n\n## The resource registry \n\nAfter the application has been loaded every resource is registered in the framework. There are several methods to access resources: \n\n__get_resources(type, name)__ will return one or more resource based on their name. A resource's name is either specified in its mixin definition or interpolated from its filename. \n* If NO parameters are passed to this method, ALL the resources are returned. \n* If `type` is passed but `name` is not, an array of all resources of the passed type is returned.\n* If `name` is passed but `type` is not truthy, all resources with the given name are returned. \n* If both parameters are truthy, than an array of (at most) one resource* is returned. \n\n__get_resource(type, name)__ returns a single resource matching the given parameters. If there is more than one resource matching the parameters is found, an error is thrown. \n\n------------------\n<small>* The storage mechanism of Resources in the Framework registry does not enforce uniqueness of name/type combinations. It is up to you to ensure that there is no overlap in the Framework's resource name space.</small>","author":"bingomanatee","creator":"bingomanatee","write_date":"2012-10-21T17:32:25.734Z","_id":"nuby_express:frameworks","__v":1,"scope_root":false,"deleted":false}