var util = require('util');
var path = require('path');
var _ = require('underscore');

var NE = require('nuby-express');
var digest_config = NE.utility.digest_config;

var ensure_name = NE.utility.ensure_name;
var _DEBUG = false;

var _known_keys = ['_items', '_member', '_menu_names'];

function Menu(config) {
    var self = this;
    digest_config(this, config, {
        _custom_config:function (key, value, target) {
         if (_DEBUG)   console.log('custom key: %s for %s', key, util.inspect(target));
            if (_.include(_known_keys, key)) {
                target[key] = value;
                return true;
            }
            return false;
        }
    });
    if (!this.name) {
        if (/_menu/.test(this.path)) {
            ensure_name(this, /^(.*)(_menu)$/i, 1);
        } else {
            ensure_name(this, /.*/);
        }
    }
}

_.extend(Menu.prototype, {
    CLASS:'MENU',
    type:'menu',
    _member:null,
    weight: 0,
    _layout_names:false,
    _url_regex:false,
    _menu_names:false,
    use_menu:function (rs, menu_name) {

        if (_DEBUG) console.log('******* USE MENU: menu %s, menu name %s', this.name, menu_name);

        if (this._menu_names) {
        //    console.log(' -- menu names; searching for %s in %s', menu_name, util.inspect(this._menu_names));
            if (!_.include(this._menu_names, menu_name)) {
              if ( _DEBUG)  console.log('NOT adding menus from %s for %s', this.name, menu_name)

                return false;
            }
        } else {
            if ( _DEBUG) console.log('NOT filtering by _menu_nanes')
        }

        if (this._member === true) {
            var member = rs.session('member');
            //console.log('checking for member: %s', util.inspect(member));

            if (!member) {
                return false;
            }
        } else if (this._member === false) {
            if (rs.session('member')) {
                return false;
            }
        }

        if (this._layout_names) {
            if ((!rs.req_props.layout_name) || (!_.include(this._layout_names, rs.req_props.layout_name))) {
           //  console.log('NOT adding menus from %s for layout %s', this.name, menu_name)

                return false;
            }
        }

        if (this._url_regex) {
            if (!this._url_regex.test(rs.req.uri)) {
                return false;
            }
        }

        return true
    },

    items:function (rs, menu_name, cb, check_use) {
        if (!rs ){
            throw new Error('rs not for items');
        }

        if (check_use){
            if (!this.use_menu(rs, menu_name)){
                return cb(null, [])
            }
        }
        this._items(rs, menu_name, cb);
    },

    _items:function (rs, menu_name, cb) {
        throw new Error('must override menu._items');
    }
})


module.exports = Menu;